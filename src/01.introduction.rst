Введение
========

.. _about-this-tutorial:

О данном руководстве
--------------------

Это введение в «Learn You Some Erlang». Данное руководство станет одним из
ваших первых шагов в изучении Erlang. Так что давайте немного поговорим о нем.

Прежде всего хочется сказать, что идея создания данного учебника появилась
у меня после прочтения `Learn You a Haskell for great Good! (LYAH) <http://learnyouahaskell.com/>`_
от Miran Lipovača. Миран проделал огромную работу делая язык привлекательным,
а обучение более дружелюбным. Так как мы были с ним знакомы, я спросил его,
что он думает насчет моей идеи сделать Erlang версию его книги. Ему эта идея
понравилась, ведь он и сам интересуется Erlang-ом.

Вот, собственно, я и пишую её. Конечно, были и другие причины: я думаю, что
порог вхождения в Erlang достаточно высок (документация в интернете разбросана,
а книги покупать будет далеко не каждый) и сообщество только выиграет от
появления LYAH-подобного руководства. Что менее важно, я встречал людей,
приписывающих Erlang'у слишком многое или, напротив, слишком недооценивающих
обобщая. Так же есть люди, считающие, что за Erlang-ом ничего нет, кроме
шумихи. Этой книгой я не пытаюсь их разубедить, так как они все равно не будут
читать её в первую очередь.

Таким образом, эта книга — путь к изучению Erlang для людей, имеющих базовые
знания императивных языков программирования (таких как C/C++, Java, Python,
Ruby, другие) и, возможно, не знающих ничего о функциональном программировании
(Haskell, Scala, Erlang, Clojure, OCaml …). Также я хочу рассказать об Erlang
честно, «как есть», показывая как сильные, так и слабые его стороны.

.. _what-is-erlang:

Так что же такое Erlang?
------------------------

Прежде всего, Erlang — функциональный язык программирования. Если Вы
когда-либо работали с императивными языками, то такие выражения, как ``i++``
должны быть Вам знакомы. Однако в функциональных языках такие выражения
недопустимы. А если быть точнее, то строго запрещены любые изменения
переменных! Поначалу это может показаться странным, но если Вы вспомните
уроки математики, то окажется, что это именно тот поход, которому Вас учили::

    y = 2
    x = y + 3
    x = 2 + 3
    x = 5

Если я еще дабавлю::

    x = 5 + 1
    x = x
    5 = 6

То Вы, наверняка, будете поставлены в тупик. Функциональное программирование
признает: что если я сказал, что ``x`` равен 5, то я не смогу так же
утверждать, что ``x`` равен 6! Это было бы нечестно. Именно по этой причине
функция с одними и теми же параметрами всегда должна возвращать один и тот же
результат::

    x = add_two_to(3) = 5
    x = 5

Функции, всегда возвращающие одинаковый результат для одинаковых параметров,
называются **ссылочно прозрачными** (referential transparency). Благодаря
этому мы можем заменить ``add_two_to(3)`` на 5, как на результат ``3+2``,
всегда возвращающее 5. Это значит, что мы можем соединять вместе десятки
функций, чтобы решать более сложные задачи, будучи при этом уверенными,
что ничего не сломается. Логично и прозрачно, не так ли? Однако есть
проблема::

    x = today() = 2009/10/22
    % -- подождали денёк --
    x = today() = 2009/10/23
    x = x
    2009/10/22 = 2009/10/23

О нет! Мои чудесные уравнения! Они внезапно стали неверными! Почему вдруг
моя функция стала возвращать разный результат каждый день?

Очевидно, есть случаи, когда необходимо нарушать ссылочную прозрачность.
В Erlang'е очень прогматичный подход к функциональному программированию:
следование истинным принципам функционального подхода (ссылочная прозрачность,
отвержение изменяемого состояния и т.д), но при этом их нарушение при
решении реальных проблем.

Итак, мы определили, что Erlang — это функциональный язык программирования.
Однако не меньшую роль в нём играют такие понятия, как  конкуретный доступ
и отказоустоучивость. Для того, чтобы было возможно одновременно исполнять
множество задач, Erlang использует `модель актёров <http://wikipedia.org/wiki/Модель_акторов>`_,
в котрой каждый актёр является отдельным процессом в виртуальной машине.
То есть, если бы Вы были акторём в мире Erlang, то Вы были бы чуть более,
чем полностью одинокой личностью, сидящей в темной комнате без окон и ждущей
нового сообщения в своем почтовом ящике. Как только Вы получаете сообщение,
Вы тут же отвечаете на него определённым образом: оплачиваете счета, отсылаете
письма с благодарностью при полуении поздравлений с днем рождения и
игнорируете те письма, которые не понимаете.

Модель актёров Erlang'a можно себе представить, как мир, где все сидят в
одиночестве в своих комнатах и могут выполнять определённый круг задач.
Общение друг с другом осуществляется исключительно с помощью писем. Не смотря
на то, что всё это выглядит довольно скучно (и новой эрой для почтовых
сервисов), это означает, что Вы можете попросить многих людей, чтобы они
выполнили определённые задачи для вас. И никто из них никогда не сделает
ошибок, которые бы негативно повлияли на результаты работ остальных,
которые, в свою очередь, могут даже и не подозревать о существовании
других людей, кроме Вас (и это здорово).

Во избежание этих аналогий, Erlang принуждает Вас к созданию актёров
(процессов), которые не имеют никакой общей информации с остальными
участками кода, кроме той, что передаётся с помощью сообщений. Каждое
взаимодействие между актёрами прозрачно, отслеживаемо и безопасно.

Итак, мы определили, что такое Erlang, но сделали это только на уровне
языка. Если смотреть шире, то Erlang — это ещё и полноценная среда разработки.
Код компилируется в байткод и выполняется в виртуальной машине. Таким
образом, Erlang (как и Java) может работать везде. Стандартный дистрибутив
включает в себя (помимо прочего) средства разработки (компилятор, отладчик,
профайлер, фрэймворк для тестирования), OTP-фрэймворк (Open Telecom
Platform), веб сервер, генератор парсеров и СУБД mnesia: хранилище типа
«ключ-значение», способное реплицироваться на несколько серверов,
поддерживающее вложенные транзакции и позволяющее хранить любые типы
данных Erlang'а.

Виртуальная машина и библиотеки так же позволяют обновлять код работающей
системы без остановки, легко обновлять код на множестве компьютеров, а также
управлять ошибками и сбоями простым, но мощным способом.

Мы ещё разберемся, как использовать большинство из этих инструментов и как
создавать безопасные приложения, а сейчас хочется рассказать про основную
политику в Erlang: пусть падает (Let it crash). Но не как самолет с гибнущими
пассажирами, а как канатоходец со страховкой. И хотя Вы должны не допускать
ошибок, Вам в большинстве случаев не придется проверять каждый тип или
состояние ошибки.

Возможности Erlang к восстановлению после ошибок, организации кода с актёрами,
масштабированию с распределением и конкурентностью — всё звучит потрясающе,
что приводит нас к следующей части...

.. _kool-aid:

Erlang — не серебряная пуля
---------------------------

Дальше Вам, вероятно, встретятся ещё много «жёлтых» разделов, названных
подобно этому (Вы их сразу узнаете). Erlang сейчас набирает большую
популярность благодаря бурным обсуждениям в интернетах, которые могут создать
у людей ложное впечатления о возможностях языка. Эти разделы будут помогать
Вас спускаться на землю, если Вы стали одним из учеников-фанатиков.

Одной из основных причин для таких слухов является возможность массового
масштабирования в Erlang благодаря легковесности его процессов. Это правда,
что процессы в Erlang очень легковесны: Вы можете одновременно использовать
сотни тысяч процессов, но это не значит, что так надо делать только потому,
что есть такая возможность. Например, создание игры-шутера, где всё, включая
пули, является актёрами — безумие. Единственная вещь, в которую вы сможете
выстрелить с такой игрой — это собственная нога. Стоимость передачи сообщения
от актёра к актёру также низка, но если Вы разделите задачи слишком сильно,
то Вы получите более низкую производительность!

Я более подробно коснусь этой темы, когда мы продвинемся в обучении настолько,
что настанет необходимость в этом. Просто помните, что случайного метания в
распараллеливание проблемы недостаточно для увеличения производительности. Но
не стоит расстраиваться, ещё будут моменты, когда использование тысяч процессов
будет не только возможным, но и полезным! Но это происходит, отнюдь, не всегда.

Так же упоминалось, что Erlang способен масштабироваться прямопорционально
количеству ядер Вашего компьютера. Обычно это не так: такая возможность есть,
но природа большинства проблем не позволит Вам выполнять все задачи в одно и
то же время.

Есть ещё одна вещь, которую надо иметь в виду: если Erlang делает некоторые
вещи хорошо, то технически возможно получить такие же результаты, используя
другие языкы програмимрования. Обратное тоже верно. Оценивайте каждую задачу
и выбирайте наиболее подходящий для её решения инструмент. Erlang — не
серебряная пуля. И с большой долей вероятности он плохо справится с такими
задачами, как обработка изображений и сигналов, драйвера устройств для
операционных систем и так далее. И наверняка проявит себя с лучшей стороны
при решении таких проблем, как серверное ПО (очереди, map-reduce),
оптимизация производительности в сочетании с другими языками программирования,
реализация протоколов высокого уровня и так далее. Решение задач, которые
находятся где-то между, уже завит от Вас. Не ограничивайте себя лишь
серверными использованием Erlang: были случаи, когда люди делали неожиданные
и совершенно удивительные вещи. Одним из таких примеров является IANO — робот,
созданный командой UNICT, которые использовали Erlang для реализации их
искуственного интеллекта и получили серебряную медаль на соревновании eurobot
в 2009-м году. Другой пример: Wings 3D — кроссплатформенное ПО с открытым
исходным кодом для 3D-моделирования (но не рендерер), написанное на Erlang.

.. _what-you-need:

Что необходимо для погружения
-----------------------------

Всё, что необходимо для начала — это текстовый редактор и окружение Erlang.
Вы можете скачать исходный код и дистрибутив для Windows с `оф.сайта Erlang`_.
Я не хочу угляблуться в тонкости установки, но для Widndows просто скачайте
и запустите установщик. Не забудьте добавить директорию Erlang'a в переменную
окружения ``PATH``, чтобы была возможность его запускать из командной строки.

.. _оф.сайта Erlang: http://erlang.org/download.html

В Debian-подобных дистрибутивах достаточно выполнить ``$ sudo apt-get install erlang``.
В Fedora, если у Вас установлен менеджер пакетов yum, Вам необходимо
выполнить следующую команду: ``# yum install erlang``. Однако, в
репозиториях зачастую находятся устаревшие версии пакетов. Использование
старых версий может давать некоторую разницу в получаемых Вами результатах
по сравнению с руководством, а так же более низкую производительность
некоторых приложений. Поэтому я предлагаю Вам скомпилировать Erlang из
исходных кодов. Чтобы узнать все тонкости свборки, ознакомьтесь с README
файлом, который идет вместе с пакетом, а так же не забывайте про Google.

На FreeBSD возможны несколько вариантов. Если Вы используете ``portmaster``,
то Вам достаточно выполнить ``portmaster lang/erlang``. Если Вы используете
стандартные порты, то необходимо выполнить: ``cd /usr/ports/lang/erlang; make install clean``.
Обратите внимание, что последний вариант требует Java, которая может
привести к некоторым дополнительным шагам по компиляции. И наконец, если
Вы хотите использовать пакеты, то выполните: ``pkg_add -rv erlang``.

Если Вы используете OSX, то Erlang можно установить следующей командой:
``$ brew install erlang`` (через Homebrew), либо командой:
``$ port install erlang`` (если Вы пользуетесь MacPorts)

.. note::

   При написании этих строк, я использовал Erlang версии R13B+. Так что,
   для получения наилучших результатов, Вам следует использовать либо
   эту версию Erlang, либо более новую.

.. note::

   При переводе этих строк, я использовал Erlang версии R14B04. Так что,
   при возможности, я буду указывать разницу в тексте между этими версиями.
   (прим.переводчика)

.. _get-help:

Где получить помощь
-------------------

Есть несколько мест, где можно получить помощь. Если Вы используете линукс,
то для получени исчерпывающей технической документации Вы можете обратиться
к man страницам. В состав Erlang входит модуль ``lists`` (который мы скоро
увидим в работе), чтобы получить по нему документацию, достаточно набрать
в консоли ``$ erl -man lists``.

В Widnows, дистрибутив Erlang должен включать HTML-документацию. Вы можете
в любое время скачать её с `оф. сайта`_ Erlang, либо обратиться к
`альтернативным версиям`_.

.. _оф. сайта: http://erlang.org/doc/
.. _альтернативным версиям: http://erldocs.com/

Хорошие практики для разработки на Erlang есть `тут`_, если Вы хотите, чтобы
Ваш код был хорошо читам и выглядел достойно. Код данного руководства так же
следует этим правилам.

.. _тут: http://www.erlang.se/doc/programming_rules.shtml

Но бывают ситуации, когда не достаточно лишь технических деталей. Когда такое
случается, я рекомендую обращаться к двум основным источникам: `лист рассылки`_
и канал `#erlang`_ на сервере ``irc.freenode.net``.

.. _лист рассылки: http://www.erlang.org/static/doc/mailinglist.html
.. _#erlang: irc://irc.freenode.net/erlang

И ещё, если Вы один из тех, кто ищет готовые ресепты, то Вам прямая дорога к
`trapexit`_. Они также зеркалируют форум, вики, лист рассылки, которые могут
всегда оказаться полезными.

.. _trapexit: http://trapexit.org/
