Модули
======

.. _what-are-modules:

Что такое модули
----------------

Работа с интерактивной оболочкой часто рассматривается как важная часть
использования динамических языков программирования. Она очень полезна
для проверки различного рода кода или программ. Большинство основных
типов данных Erlang могут быть использованы таким образом даже без
необходимости открытия текстового редактора или сохранения файлов. Если
после этих фраз Вы не станете читать дальше, то из Вас получится
хреновый Erlang-программист. Для повторного использования код необходимо
куда-то сохранять!

Вот для чего нужны модули. Модули — это пачка функций, сгруппиованная в
отдельном файле под одним именем. Кроме того, все функции в Erlang должны
быть определены только в модулях. Вы уже использовали модули, возможно,
даже не подозревая об этом. BIF'ы, упоминавшиеся в предыдущих главах,
(например, ``hd`` или ``tl``) на самом деле принадлежат модулю ``erlang``.
Так же в этом модуле определены все арифметические, логические и булевы
операторы. BIF'ы из модуля ``erlang`` отличаются от других функций: они
импортируются автоматически. Любую другую функцию, объявленную в модуле,
необходимо вызывать в формате: ``Module:Function(Arguments)``.

Вот, можете сами в этом убедиться::

    1> erlang:element(2, {a,b,c}).
    b
    2> element(2, {a,b,c}).
    b
    3> lists:seq(1,4).
    [1,2,3,4]
    4> seq(1,4).
    ** exception error: undefined shell command seq/2

В этом примере функция ``seq`` из модуля ``list`` не импортируется
автоматически, в отличии от функции ``element``. В результате чего
оболочка шлёт нам сообщение об ошибке: ``undefined shell command``,
пытаясь найти команду наподобие ``f()`` и не находящая её. Так же
в модуле ``erlang`` есть ряд функций, которые не импортируются
автоматически. Но они используются не часто.

Логично предположить, что все функции одной предметной области необходимо
размещать в одном модуле. Так, например, основные операции над списками
находятся в модуле ``lists``. А функции, отвечающие за ввод/вывод (такие,
как запись на терминал или в файл), сгруппированы в модуле ``io``. Есть,
правда, один модуль, который не соответствует этому шаблону — это
ранее упомянутый модуль ``erlang``, в котором определены функции, связанные
с математикой, преобразованиями, мультипроцессингом, настройкой виртуальной
машины и т.д. У этих функций нет ничего общего кроме того, что они являются
встроенными функциями (BIF). Так что не следует создавать модуль с именем
``erlang``. Лучше сосредоточтесь на чисто логическом разделении функций
по модулям.

.. _module-declaration:

Объявление модулей
------------------

При создании модуля можно декларировать два вида сущностей: функции и атрибуты.
Атрибуты — это метаданные, описывающие сам модуль: имя модуля, функции,
которые будут видны во внешнем мире, автора модуля и т.д. Такого рода
информация очень полезна, так как подсказывает компилятору то, как он должен
работать, а так же позволяет людям без заглядывания в исходный код получать
полезную информацию.
